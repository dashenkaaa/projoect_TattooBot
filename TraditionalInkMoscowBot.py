import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
)

BOT_TOKEN = 'token'
MASTER_CHAT_ID = id
STUDIO_ADDRESS = "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç–æ–ª–µ—Ç–æ–≤–∞, 7–∫1"
MASTER_USERNAME = "@traditional_ink_direct"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, TYPING_TIME, CANCELING = range(3)

def generate_free_slots(days=7):
    slots = []
    start_time = datetime.now()
    for i in range(days):
        day = start_time + timedelta(days=i)
        for hour in [9, 10, 11]:
            slot = day.replace(hour=hour, minute=0)
            slots.append(slot.strftime("%d %B %H:%M"))
    return slots

FREE_SLOTS = generate_free_slots()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect("appointments.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS appointments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            datetime TEXT,
            service_type TEXT,
            status TEXT DEFAULT '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            timestamp TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    return conn

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üóì –û—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
        [InlineKeyboardButton("üìÜ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="free_time")],
        [InlineKeyboardButton("üñã –¢–∞—Ç—É-—Å–µ–∞–Ω—Å", callback_data="tattoo_session")],
        [InlineKeyboardButton("üí¨ –û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="online_consult")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_appointment")]
    ]
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Traditional Ink Moscow.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)
    return CHOOSING

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data in ["consultation", "tattoo_session"]:
        context.user_data['service_type'] = "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if data == "consultation" else "—Ç–∞—Ç—É-—Å–µ–∞–Ω—Å"
        await query.edit_message_text(
            f"üìç {STUDIO_ADDRESS}\n\n"
            f"–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è {context.user_data['service_type']}:\n- " + "\n- ".join(FREE_SLOTS) + "\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 –∏—é–Ω—è 14:00):"
        )
        return TYPING_TIME

    elif data == "free_time":
        await query.edit_message_text("üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n" + "\n".join(FREE_SLOTS))
        # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é
        await show_main_menu(update, context)
        return CHOOSING

    elif data == "online_consult":
        await query.edit_message_text(f"üîó –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {MASTER_USERNAME}")
        # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é
        await show_main_menu(update, context)
        return CHOOSING

    elif data == "cancel_appointment":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å:")
        return CANCELING

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CHOOSING

async def received_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    username = user.username or user.first_name
    text = update.message.text.strip()
    service_type = context.user_data.get('service_type')
    status = "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" if service_type == "—Ç–∞—Ç—É-—Å–µ–∞–Ω—Å" else "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"

    conn = sqlite3.connect("appointments.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–µ–Ω—å
    date_part = text.split()[0]
    cursor.execute(
        "SELECT COUNT(*) FROM appointments WHERE username = ? AND datetime LIKE ?",
        (username, f"{date_part}%")
    )
    count = cursor.fetchone()[0]
    if count >= 2:
        await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–≤–∞–∂–¥—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
        conn.close()
        return await back_to_menu(update, context)

    cursor.execute(
        "INSERT INTO appointments (username, datetime, service_type, status) VALUES (?, ?, ?, ?)",
        (username, text, service_type, status)
    )
    conn.commit()
    conn.close()

    response = (
        f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {service_type} –≤ {text}.\n"
        f"{'‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.' if service_type == '—Ç–∞—Ç—É-—Å–µ–∞–Ω—Å' else ''}"
    )
    await update.message.reply_text(response)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
    await context.bot.send_message(
        chat_id=MASTER_CHAT_ID,
        text=(
            f"üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å\n"
            f"üë§ @{username}\n"
            f"üìÖ {text}\n"
            f"üíº {service_type}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {status}"
        )
    )
    return await back_to_menu(update, context)

async def cancel_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    username = user.username or user.first_name
    text = update.message.text.strip()

    conn = sqlite3.connect("appointments.db")
    cursor = conn.cursor()
    cursor.execute(
        "DELETE FROM appointments WHERE username = ? AND datetime LIKE ?",
        (username, f"%{text}%")
    )
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()

    msg = "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞." if deleted_rows > 0 else "‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    await update.message.reply_text(msg)
    return await back_to_menu(update, context)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)
    return CHOOSING

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    return CHOOSING

def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [
                CallbackQueryHandler(button_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, fallback)
            ],
            TYPING_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_time)
            ],
            CANCELING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_appointment)
            ],
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9:00
    app.job_queue.run_daily(
        lambda ctx: send_daily_reminders(ctx),
        time=datetime.strptime("09:00", "%H:%M").time()
    )

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

async def send_daily_reminders(context: ContextTypes.DEFAULT_TYPE):
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d %B')
    conn = sqlite3.connect("appointments.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT username, datetime, service_type FROM appointments WHERE datetime LIKE ? AND status != '–æ—Ç–º–µ–Ω–µ–Ω–æ'",
        (f"{tomorrow}%",)
    )
    appointments = cursor.fetchall()
    conn.close()

    for username, appt_time, service_type in appointments:
        try:
            await context.bot.send_message(
                chat_id=f"@{username}",
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ {service_type} –≤ {appt_time}!\nüìç –ê–¥—Ä–µ—Å: {STUDIO_ADDRESS}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è @{username}: {e}")

if __name__ == '__main__':
    main()
